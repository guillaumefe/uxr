<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Éditeur en Direct</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: stretch;
            height: 100vh;
            margin: 0;
        }
        textarea, iframe {
            flex: 1;
            border: none;
        }
        textarea {
            padding: 10px;
            font-size: 16px;
            resize: none;
            margin-bottom: 10px;
        }
        iframe {
            max-width: 100%;
        }
        .sauvegardes {
            position: fixed;
            left: -200px;
            top: 0;
            width: 200px;
            height: 100%;
            background-color: #f1f1f1;
            transition: left 0.3s;
            box-shadow: 2px 0 5px rgba(0,0,0,0.2);
            overflow-y: auto;
            z-index: 1000;
        }
        .sauvegardes.visible {
            left: 0;
        }
        .sauvegarde-item {
            padding: 10px;
            display: flex;
            justify-content: space-between;
            border-bottom: 1px solid #ddd;
            align-items: center;
        }
        .sauvegarde-item:hover {
            background-color: #eee;
        }
        .delete-btn {
            background-color: red;
            color: white;
            border: none;
            padding: 5px;
            cursor: pointer;
        }
        .tab {
            position: fixed;
            left: 0;
            top: 50%;
            width: 20px;
            height: 60px;
            background-color: #333;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .delete-all-btn {
            background-color: red;
            color: white;
            border: none;
            width: 100%;
            padding: 10px;
            cursor: pointer;
            margin-top: 10px;
        }
        @media (min-width: 768px) {
            body {
                flex-direction: row;
            }
            textarea {
                margin-right: 10px;
                margin-bottom: 0;
            }
        }
    </style>
</head>
<body>
    <textarea id="editor" placeholder="Écrivez votre code ici..."></textarea>
    <iframe id="output" title="Aperçu"></iframe>

    <div class="tab" id="toggleTab">></div>
    <div class="sauvegardes" id="sauvegardes">
        <button class="delete-all-btn" id="deleteAll">Tout effacer</button>
        <!-- Sauvegardes affichées ici -->
    </div>

    <script>
        const editor = document.getElementById('editor');
        const output = document.getElementById('output');
        const sauvegardesDiv = document.getElementById('sauvegardes');
        const toggleTab = document.getElementById('toggleTab');
        let deleteAllBtn = document.getElementById('deleteAll');

        // Ouvrir ou fermer le volet de sauvegardes
        toggleTab.addEventListener('click', () => {
            sauvegardesDiv.classList.toggle('visible');
            toggleTab.textContent = sauvegardesDiv.classList.contains('visible') ? '<' : '>';
        });

        // Fermer le volet en cliquant à l'extérieur
        document.addEventListener('click', (event) => {
            if (!sauvegardesDiv.contains(event.target) && !toggleTab.contains(event.target)) {
                sauvegardesDiv.classList.remove('visible');
                toggleTab.textContent = '>';
            }
        });

        // Sauvegarder le code dans IndexedDB
        const dbRequest = indexedDB.open('EditorDB', 1);
        let db;

        dbRequest.onupgradeneeded = function(event) {
            db = event.target.result;
            db.createObjectStore('codes', { autoIncrement: true });
        };

        dbRequest.onsuccess = function(event) {
            db = event.target.result;
            clearEditor();
            loadSavedCodes();
        };

        dbRequest.onerror = function() {
            console.error('Erreur lors de l\'ouverture de la base de données');
        };

        // Fonction pour vider l'éditeur et les variables d'environnement
        function clearEditor() {
            editor.value = '';
            localStorage.clear(); // On efface aussi le localStorage au cas où
        }

        // Fonction pour sauvegarder le contenu dans IndexedDB
        function saveEditorContent() {
            const code = editor.value.trim(); // Supprime les espaces inutiles
            if (code) {
                const transaction = db.transaction(['codes'], 'readwrite');
                const store = transaction.objectStore('codes');
                store.add({ code });
                loadSavedCodes(); // Rafraîchir la liste des sauvegardes
            }
        }

        // Fonction pour charger les codes sauvegardés dans la liste
        function loadSavedCodes() {
            const transaction = db.transaction(['codes'], 'readonly');
            const store = transaction.objectStore('codes');
            const request = store.getAll();

            request.onsuccess = function(event) {
                const codes = event.target.result;
                const nonEmptyCodes = codes.filter(codeObj => codeObj.code.trim() !== ""); // Filtrer les codes vides
                displaySavedCodes(nonEmptyCodes);
            };
        }

        // Fonction pour afficher la liste des codes sauvegardés
        function displaySavedCodes(codes) {
            sauvegardesDiv.innerHTML = '<button class="delete-all-btn" id="deleteAll">Tout effacer</button>';
            codes.forEach((codeObj, index) => {
                const codeItem = document.createElement('div');
                codeItem.classList.add('sauvegarde-item');
                codeItem.innerHTML = `
                    <span>Sauvegarde ${index + 1}</span>
                    <button class="delete-btn">Supprimer</button>
                `;
                codeItem.querySelector('.delete-btn').addEventListener('click', () => {
                    deleteSavedCode(index);
                });
                codeItem.addEventListener('click', () => {
                    loadCodeInEditor(codeObj.code);
                });
                sauvegardesDiv.appendChild(codeItem);
            });
            // Re-bind the "Tout effacer" button event
            deleteAllBtn = document.getElementById('deleteAll');
            deleteAllBtn.addEventListener('click', deleteAllSavedCodes);
        }

        // Fonction pour charger un code sauvegardé dans l'éditeur
        function loadCodeInEditor(code) {
            editor.value = code;
            updateOutput();
        }

        // Fonction pour supprimer un code sauvegardé
        function deleteSavedCode(id) {
            const transaction = db.transaction(['codes'], 'readwrite');
            const store = transaction.objectStore('codes');
            const request = store.getAll();

            request.onsuccess = function(event) {
                const codes = event.target.result;
                if (codes[id]) {
                    const deleteTransaction = db.transaction(['codes'], 'readwrite');
                    const deleteStore = deleteTransaction.objectStore('codes');
                    deleteStore.delete(id + 1); // IDs are indexed from 1, not 0.
                    loadSavedCodes(); // Refresh after deletion
                }
            };
        }

        // Fonction pour tout supprimer
        function deleteAllSavedCodes() {
            const transaction = db.transaction(['codes'], 'readwrite');
            const store = transaction.objectStore('codes');
            const clearRequest = store.clear();

            clearRequest.onsuccess = function() {
                loadSavedCodes(); // Refresh after clearing all
            };
        }

        // Sauvegarder le contenu à chaque modification
        editor.addEventListener('input', () => {
            updateOutput();
        });

        // Mettre à jour la sortie en temps réel
        function updateOutput() {
            const code = editor.value;
            output.contentWindow.document.open();
            output.contentWindow.document.write(code);
            output.contentWindow.document.close();
        }

        // Fonction pour sauvegarder le code manuellement
        window.addEventListener('beforeunload', () => {
            saveEditorContent(); // Sauvegarde automatique avant de quitter
        });
    </script>
</body>
</html>
